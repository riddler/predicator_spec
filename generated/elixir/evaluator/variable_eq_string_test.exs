# AUTOGENERATED FILE - DO NOT EDIT
defmodule Predicator.VariableEqStringTest do
  use ExUnit.Case, async: false
  @moduletag :spec

  setup_all do
    %{instructions: [["load", "plan"], ["to_str"], ["lit", "basic"], ["compare", "EQ"]]}
  end

  test "with_no_context", context do
    predicate_context = nil
    expected_result = false

    result = Predicator.Evaluator.execute context[:instructions], predicate_context
    assert expected_result == result
    #assert_empty e.stack
  end

  test "with_blank_string", context do
    predicate_context = %{plan: ""}
    expected_result = false

    result = Predicator.Evaluator.execute context[:instructions], predicate_context
    assert expected_result == result
    #assert_empty e.stack
  end

  test "with_correct_string", context do
    predicate_context = %{plan: "basic"}
    expected_result = true

    result = Predicator.Evaluator.execute context[:instructions], predicate_context
    assert expected_result == result
    #assert_empty e.stack
  end

  test "with_incorrect_string", context do
    predicate_context = %{plan: "free"}
    expected_result = false

    result = Predicator.Evaluator.execute context[:instructions], predicate_context
    assert expected_result == result
    #assert_empty e.stack
  end

  test "with_int", context do
    predicate_context = %{plan: 1}
    expected_result = false

    result = Predicator.Evaluator.execute context[:instructions], predicate_context
    assert expected_result == result
    #assert_empty e.stack
  end

  test "with_false", context do
    predicate_context = %{plan: false}
    expected_result = false

    result = Predicator.Evaluator.execute context[:instructions], predicate_context
    assert expected_result == result
    #assert_empty e.stack
  end

  test "with_true", context do
    predicate_context = %{plan: true}
    expected_result = false

    result = Predicator.Evaluator.execute context[:instructions], predicate_context
    assert expected_result == result
    #assert_empty e.stack
  end

end
