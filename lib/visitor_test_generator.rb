class VisitorTestGenerator < TestGenerator
  def self.generate
    project_root = Pathname.new File.expand_path "..", __dir__
    spec_path = project_root.join "../predicator_spec"

    spec_path.glob "visitors/*.yml" do |file|
      generator = new project_root, file
      generator.generate
    end
  end

  def initialize project_root, input_filename
    @project_root = project_root
    @spec_path = project_root.join "../predicator_spec"
    @input_filename = input_filename
    @test_case = YAML.safe_load File.read input_filename
  end

  private

  def language_settings
    {
      javascript: {
        filename_template: "%s.test.js",
        template: <<~TEMPLATE
          // This file is auto-generated.
          // To make changes - look in scripts/generate-tests.js

          const { compile } = require('../../src/predicator')
          <% tests.each do |test| %>
          test('it compiles <%= test["name"] %>', () => {
            expect(compile(`<%= test["source"] %>`)).toEqual(<%= JSON.dump test["instructions"] %>)
          })<% end %>
        TEMPLATE
      }
      #,
      #ruby: {
      #  filename_template: "test_%s.rb",
      #  template: <<~TEMPLATE
      #    # AUTOGENERATED FILE - DO NOT EDIT
      #    require "helper"

      #    class <%= class_name %>Test < ::Minitest::Test
      #      attr_reader :instructions

      #      def setup
      #        @instructions = <%= instructions %>
      #      end
      #    <% tests.each do |test| %>
      #      def test_<%= test["name"] %>
      #        context = <% if test["context"].nil? %>nil<% else %><%= test["context"] %><% end %>
      #        expected_result = <% if test["result"].nil? %>nil<% else %><%= test["result"] %><% end %>

      #        e = ::Predicator::Evaluator.new instructions, context
      #        assert_equal expected_result, e.result
      #        assert_empty e.stack
      #      end
      #    <% end %>
      #    end
      #  TEMPLATE
      #}
    }
  end
end
