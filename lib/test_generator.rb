require "erb"
require "yaml"

class TestGenerator
  include ERB::Util
  attr_reader :project_root, :input_filename, :test_case

  def initialize project_root, input_filename
    @project_root = project_root
    @input_filename = input_filename
    @test_case = YAML.safe_load File.read input_filename
  end

  def test_case_name
    test_case["name"]
  end

  def class_name
    classify test_case_name
  end

  def instructions
    test_case["instructions"]
  end

  def tests
    test_case["tests"]
  end

  def generate
    folder = input_filename.dirname.basename.to_s
    language_settings.each do |(language,settings)|
      langauge_filename = settings[:filename_template] % test_case_name
      language_template = settings[:template]

      output_filename = project_root.join *%W[ generated #{language} #{folder} #{langauge_filename} ]
      puts "Generating #{output_filename.relative_path_from(project_root)}"
      output_filename.dirname.mkpath unless output_filename.dirname.exist?
      contents = render language_template
      File.write output_filename, contents
    end
  end

  private

  def render(template)
    ERB.new(template).result(binding)
  end

  def classify string
    string.to_s.split('_').collect!{ |w| w.capitalize }.join
  end

  def elixir_hash hash
    symbolized_keys_hash = hash.transform_keys {|k| k.to_sym}
    hash_string = symbolized_keys_hash.to_s
      .gsub(/=>/, ": ")
      .gsub(/([{\s]):/, '\1')
    "%#{hash_string}"
  end

  def language_settings
    {
      elixir: {
        filename_template: "%s_test.exs",
        template: <<~TEMPLATE
          # AUTOGENERATED FILE - DO NOT EDIT
          defmodule Predicator.<%= class_name %>Test do
            use ExUnit.Case, async: false

            setup_all do
              %{instructions: <%= instructions %>}
            end
          <% tests.each do |test| %>
            test "<%= test["name"] %>", context do
              predicate_context = <% if test["context"].nil? %>nil<% else %><%= elixir_hash test["context"] %><% end %>
              expected_result = <% if test["result"].nil? %>nil<% else %><%= test["result"] %><% end %>

              result = Predicator.Evaluator.execute context[:instructions], predicate_context
              assert expected_result == result
              #assert_empty e.stack
            end
          <% end %>
          end
        TEMPLATE
      },
      ruby: {
        filename_template: "test_%s.rb",
        template: <<~TEMPLATE
          # AUTOGENERATED FILE - DO NOT EDIT
          require "helper"

          class <%= class_name %>Test < ::Minitest::Test
            attr_reader :instructions

            def setup
              @instructions = <%= instructions %>
            end
          <% tests.each do |test| %>
            def test_<%= test["name"] %>
              context = <% if test["context"].nil? %>nil<% else %><%= test["context"] %><% end %>
              expected_result = <% if test["result"].nil? %>nil<% else %><%= test["result"] %><% end %>

              e = ::Predicator::Evaluator.new instructions, context
              assert_equal expected_result, e.result
              assert_empty e.stack
            end
          <% end %>
          end
        TEMPLATE
      }
    }
  end
end
